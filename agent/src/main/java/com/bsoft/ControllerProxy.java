package com.bsoft;


import jdk.internal.org.objectweb.asm.*;

import static jdk.internal.org.objectweb.asm.Opcodes.*;

/**
 * @author: 何胜豪
 * @Title: TODO
 * @Package: com.agent
 * @Description:
 * @date : 2021/7/3 15:24
 */
public class ControllerProxy {


    public byte[]  aop(byte[] bytes) {
        ClassReader cr = new ClassReader(bytes);

        return  aop(cr);
    }

    private byte[] aop(ClassReader cr)  {

        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;
        AnnotationVisitor av0;

        cw.visit(52, ACC_PUBLIC + ACC_SUPER, "ctd/mvc/controller/support/JSONRequester", null, "ctd/mvc/controller/OutputSupportMVCController", null);

        cw.visitSource("JSONRequester.java", null);

        {
            av0 = cw.visitAnnotation("Lorg/springframework/stereotype/Controller;", true);
            av0.visit("value", "mvcJSONRequester");
            av0.visitEnd();
        }
        cw.visitInnerClass("java/lang/invoke/MethodHandles$Lookup", "java/lang/invoke/MethodHandles", "Lookup", ACC_PUBLIC + ACC_FINAL + ACC_STATIC);

        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "logger", "Lorg/slf4j/Logger;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "MVC_AUTHENTICATION", "Ljava/lang/String;", null, "mvc_authentication");
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "MVC_AUTH_METHOD_EXCLUDE", "Ljava/lang/String;", null, "mvc_auth_method_exclude");
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "MVC_EXPIRES", "Ljava/lang/String;", null, "mvc_expires");
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "LOCAL_DOMAIN_PLACE_HOLDER", "Ljava/lang/String;", null, "$.");
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "HEADER_SERVICE_ID", "Ljava/lang/String;", null, "X-Service-Id");
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "HEADER_SERVICE_METHOD", "Ljava/lang/String;", null, "X-Service-Method");
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "HEADER_ACTION_ID", "Ljava/lang/String;", null, "X-Action-Id");
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE, "domainMapping", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE, "hasFilter", "Ljava/lang/Boolean;", null, null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(64, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/mvc/controller/OutputSupportMVCController", "<init>", "()V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(67, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitTypeInsn(NEW, "java/util/HashMap");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
            mv.visitFieldInsn(PUTFIELD, "ctd/mvc/controller/support/JSONRequester", "domainMapping", "Ljava/util/Map;");
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(69, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
            mv.visitFieldInsn(PUTFIELD, "ctd/mvc/controller/support/JSONRequester", "hasFilter", "Ljava/lang/Boolean;");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(65, l3);
            mv.visitInsn(RETURN);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLocalVariable("this", "Lctd/mvc/controller/support/JSONRequester;", null, l0, l4, 0);
            mv.visitMaxs(3, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "doBalance", "(Ljava/util/HashMap;Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V", "(Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V", null);
            {
                av0 = mv.visitAnnotation("Lorg/springframework/web/bind/annotation/RequestMapping;", true);
                {
                    AnnotationVisitor av1 = av0.visitArray("value");
                    av1.visit(null, "/**/*.balance");
                    av1.visitEnd();
                }
                {
                    AnnotationVisitor av1 = av0.visitArray("method");
                    av1.visitEnum(null, "Lorg/springframework/web/bind/annotation/RequestMethod;", "POST");
                    av1.visitEnd();
                }
                {
                    AnnotationVisitor av1 = av0.visitArray("headers");
                    av1.visit(null, "content-type=application/json");
                    av1.visitEnd();
                }
                av0.visitEnd();
            }
            {
                av0 = mv.visitParameterAnnotation(0, "Lorg/springframework/web/bind/annotation/RequestBody;", true);
                av0.visitEnd();
            }
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "ctd/util/store/StoreException");
            Label l3 = new Label();
            Label l4 = new Label();
            Label l5 = new Label();
            mv.visitTryCatchBlock(l3, l4, l5, "java/io/IOException");
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(78, l6);
            mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitLdcInsn(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  change Balance <<<<<<<<<<<<<<<<<<<<<<<<<<<<");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(82, l7);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn("target");
            mv.visitTypeInsn(NEW, "java/util/HashMap");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/util/HashMap");
            mv.visitVarInsn(ASTORE, 4);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(84, l8);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn("source");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/util/LinkedHashMap");
            mv.visitVarInsn(ASTORE, 5);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(86, l9);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("nodeName");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/LinkedHashMap", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/lang/String");
            mv.visitVarInsn(ASTORE, 6);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(88, l10);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/AppContextHolder", "getName", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 7);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(90, l11);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitLdcInsn("/ssdev/serverNodes/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 8);
            mv.visitLabel(l0);
            mv.visitLineNumber(93, l0);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/spring/AppDomainContext", "getActiveStore", "()Lctd/util/store/ActiveStore;", false);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEINTERFACE, "ctd/util/store/ActiveStore", "getData", "(Ljava/lang/String;)[B", true);
            mv.visitVarInsn(ASTORE, 9);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(95, l12);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitLdcInsn(Type.getType("Lctd/net/rpc/logger/pm/ServerNode;"));
            mv.visitInsn(ICONST_0);
            mv.visitTypeInsn(ANEWARRAY, "com/alibaba/fastjson/parser/Feature");
            mv.visitMethodInsn(INVOKESTATIC, "com/alibaba/fastjson/JSON", "parseObject", "([BLjava/lang/reflect/Type;[Lcom/alibaba/fastjson/parser/Feature;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "ctd/net/rpc/logger/pm/ServerNode");
            mv.visitVarInsn(ASTORE, 10);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(97, l13);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "size", "()I", false);
            Label l14 = new Label();
            mv.visitJumpInsn(IFNE, l14);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(98, l15);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitInsn(ACONST_NULL);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/logger/pm/ServerNode", "setDomainMapping", "(Ljava/util/Map;)V", false);
            mv.visitLabel(l14);
            mv.visitLineNumber(101, l14);
            mv.visitFrame(Opcodes.F_FULL, 11, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/util/HashMap", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "java/util/HashMap", "java/util/LinkedHashMap", "java/lang/String", "java/lang/String", "java/lang/String", "[B", "ctd/net/rpc/logger/pm/ServerNode"}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "ctd/mvc/controller/support/JSONRequester", "domainMapping", "Ljava/util/Map;");
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "clear", "()V", true);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(103, l16);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "ctd/mvc/controller/support/JSONRequester", "domainMapping", "Ljava/util/Map;");
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "putAll", "(Ljava/util/Map;)V", true);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(105, l17);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "ctd/mvc/controller/support/JSONRequester", "domainMapping", "Ljava/util/Map;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/logger/pm/ServerNode", "setDomainMapping", "(Ljava/util/Map;)V", false);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(107, l18);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/JSONUtils", "toBytes", "(Ljava/lang/Object;)[B", false);
            mv.visitVarInsn(ASTORE, 11);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(108, l19);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/spring/AppDomainContext", "getActiveStore", "()Lctd/util/store/ActiveStore;", false);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEINTERFACE, "ctd/util/store/ActiveStore", "delete", "(Ljava/lang/String;)V", true);
            Label l20 = new Label();
            mv.visitLabel(l20);
            mv.visitLineNumber(109, l20);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/spring/AppDomainContext", "getActiveStore", "()Lctd/util/store/ActiveStore;", false);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKEINTERFACE, "ctd/util/store/ActiveStore", "createTempPath", "(Ljava/lang/String;[B)V", true);
            mv.visitLabel(l1);
            mv.visitLineNumber(113, l1);
            Label l21 = new Label();
            mv.visitJumpInsn(GOTO, l21);
            mv.visitLabel(l2);
            mv.visitLineNumber(111, l2);
            mv.visitFrame(Opcodes.F_FULL, 9, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/util/HashMap", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "java/util/HashMap", "java/util/LinkedHashMap", "java/lang/String", "java/lang/String", "java/lang/String"}, 1, new Object[]{"ctd/util/store/StoreException"});
            mv.visitVarInsn(ASTORE, 9);
            Label l22 = new Label();
            mv.visitLabel(l22);
            mv.visitLineNumber(112, l22);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/util/store/StoreException", "printStackTrace", "()V", false);
            mv.visitLabel(l21);
            mv.visitLineNumber(115, l21);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "ctd/mvc/controller/support/JSONRequester", "hasFilter", "Ljava/lang/Boolean;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z", false);
            Label l23 = new Label();
            mv.visitJumpInsn(IFNE, l23);
            Label l24 = new Label();
            mv.visitLabel(l24);
            mv.visitLineNumber(116, l24);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/net/rpc/Client", "getChainPipeLine", "()Lctd/net/rpc/chain/ChainPipeLine;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInvokeDynamicInsn("doFilter", "(Lctd/mvc/controller/support/JSONRequester;)Lctd/net/rpc/chain/ChainFilter;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"), new Object[]{Type.getType("(Lctd/net/rpc/chain/ChainContext;)V"), new Handle(Opcodes.H_INVOKESPECIAL, "ctd/mvc/controller/support/JSONRequester", "lambda$doBalance$0", "(Lctd/net/rpc/chain/ChainContext;)V"), Type.getType("(Lctd/net/rpc/chain/ChainContext;)V")});
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/chain/ChainPipeLine", "addFirst", "(Lctd/net/rpc/chain/ChainFilter;)Lctd/net/rpc/chain/ChainPipeLine;", false);
            mv.visitInsn(POP);
            Label l25 = new Label();
            mv.visitLabel(l25);
            mv.visitLineNumber(124, l25);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
            mv.visitFieldInsn(PUTFIELD, "ctd/mvc/controller/support/JSONRequester", "hasFilter", "Ljava/lang/Boolean;");
            mv.visitLabel(l23);
            mv.visitLineNumber(126, l23);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitTypeInsn(NEW, "ctd/net/rpc/json/JSONResponseBean");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/net/rpc/json/JSONResponseBean", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 9);
            Label l26 = new Label();
            mv.visitLabel(l26);
            mv.visitLineNumber(127, l26);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitLdcInsn("\u6267\u884c\u6210\u529f");
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setBody", "(Ljava/lang/Object;)V", false);
            Label l27 = new Label();
            mv.visitLabel(l27);
            mv.visitLineNumber(128, l27);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitIntInsn(SIPUSH, 200);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setCode", "(I)V", false);
            Label l28 = new Label();
            mv.visitLabel(l28);
            mv.visitLineNumber(129, l28);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitLdcInsn("");
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setMsg", "(Ljava/lang/String;)V", false);
            mv.visitLabel(l3);
            mv.visitLineNumber(131, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitInsn(ICONST_0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/mvc/controller/support/JSONRequester", "jsonOutput", "(Ljavax/servlet/http/HttpServletResponse;Lctd/net/rpc/json/JSONResponseBean;Z)V", false);
            mv.visitLabel(l4);
            mv.visitLineNumber(134, l4);
            Label l29 = new Label();
            mv.visitJumpInsn(GOTO, l29);
            mv.visitLabel(l5);
            mv.visitLineNumber(132, l5);
            mv.visitFrame(Opcodes.F_FULL, 10, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/util/HashMap", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "java/util/HashMap", "java/util/LinkedHashMap", "java/lang/String", "java/lang/String", "java/lang/String", "ctd/net/rpc/json/JSONResponseBean"}, 1, new Object[]{"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 10);
            Label l30 = new Label();
            mv.visitLabel(l30);
            mv.visitLineNumber(133, l30);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l29);
            mv.visitLineNumber(135, l29);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(RETURN);
            Label l31 = new Label();
            mv.visitLabel(l31);
            mv.visitLocalVariable("data", "[B", null, l12, l1, 9);
            mv.visitLocalVariable("node", "Lctd/net/rpc/logger/pm/ServerNode;", null, l13, l1, 10);
            mv.visitLocalVariable("bytes", "[B", null, l19, l1, 11);
            mv.visitLocalVariable("e", "Lctd/util/store/StoreException;", null, l22, l21, 9);
            mv.visitLocalVariable("e", "Ljava/io/IOException;", null, l30, l29, 10);
            mv.visitLocalVariable("this", "Lctd/mvc/controller/support/JSONRequester;", null, l6, l31, 0);
            mv.visitLocalVariable("map", "Ljava/util/HashMap;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;", l6, l31, 1);
            mv.visitLocalVariable("request", "Ljavax/servlet/http/HttpServletRequest;", null, l6, l31, 2);
            mv.visitLocalVariable("response", "Ljavax/servlet/http/HttpServletResponse;", null, l6, l31, 3);
            mv.visitLocalVariable("target", "Ljava/util/HashMap;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;", l8, l31, 4);
            mv.visitLocalVariable("o1", "Ljava/util/LinkedHashMap;", null, l9, l31, 5);
            mv.visitLocalVariable("nodeName", "Ljava/lang/String;", null, l10, l31, 6);
            mv.visitLocalVariable("domain", "Ljava/lang/String;", null, l11, l31, 7);
            mv.visitLocalVariable("PATH", "Ljava/lang/String;", null, l0, l31, 8);
            mv.visitLocalVariable("bean", "Lctd/net/rpc/json/JSONResponseBean;", null, l26, l31, 9);
            mv.visitMaxs(4, 12);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "doJSONRequest", "(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V", null, null);
            {
                av0 = mv.visitAnnotation("Lorg/springframework/web/bind/annotation/RequestMapping;", true);
                {
                    AnnotationVisitor av1 = av0.visitArray("value");
                    av1.visit(null, "/**/*.jsonRequest");
                    av1.visitEnd();
                }
                {
                    AnnotationVisitor av1 = av0.visitArray("method");
                    av1.visitEnum(null, "Lorg/springframework/web/bind/annotation/RequestMethod;", "POST");
                    av1.visitEnd();
                }
                {
                    AnnotationVisitor av1 = av0.visitArray("headers");
                    av1.visit(null, "content-type=application/json");
                    av1.visitEnd();
                }
                av0.visitEnd();
            }
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(144, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn("X-Service-Id");
            mv.visitMethodInsn(INVOKEINTERFACE, "javax/servlet/http/HttpServletRequest", "getHeader", "(Ljava/lang/String;)Ljava/lang/String;", true);
            mv.visitVarInsn(ASTORE, 3);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(145, l1);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn("X-Service-Method");
            mv.visitMethodInsn(INVOKEINTERFACE, "javax/servlet/http/HttpServletRequest", "getHeader", "(Ljava/lang/String;)Ljava/lang/String;", true);
            mv.visitVarInsn(ASTORE, 4);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(146, l2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn("X-Action-Id");
            mv.visitMethodInsn(INVOKEINTERFACE, "javax/servlet/http/HttpServletRequest", "getHeader", "(Ljava/lang/String;)Ljava/lang/String;", true);
            mv.visitVarInsn(ASTORE, 5);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(147, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/mvc/controller/support/JSONRequester", "dpApiInvoke", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V", false);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(148, l4);
            mv.visitInsn(RETURN);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLocalVariable("this", "Lctd/mvc/controller/support/JSONRequester;", null, l0, l5, 0);
            mv.visitLocalVariable("request", "Ljavax/servlet/http/HttpServletRequest;", null, l0, l5, 1);
            mv.visitLocalVariable("response", "Ljavax/servlet/http/HttpServletResponse;", null, l0, l5, 2);
            mv.visitLocalVariable("beanName", "Ljava/lang/String;", null, l1, l5, 3);
            mv.visitLocalVariable("methodName", "Ljava/lang/String;", null, l2, l5, 4);
            mv.visitLocalVariable("actionId", "Ljava/lang/String;", null, l3, l5, 5);
            mv.visitMaxs(6, 6);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "dpApiInvoke", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V", null, null);
            {
                av0 = mv.visitAnnotation("Lorg/springframework/web/bind/annotation/RequestMapping;", true);
                {
                    AnnotationVisitor av1 = av0.visitArray("value");
                    av1.visit(null, "/api/{beanName}/{method}");
                    av1.visitEnd();
                }
                {
                    AnnotationVisitor av1 = av0.visitArray("method");
                    av1.visitEnum(null, "Lorg/springframework/web/bind/annotation/RequestMethod;", "POST");
                    av1.visitEnd();
                }
                {
                    AnnotationVisitor av1 = av0.visitArray("headers");
                    av1.visit(null, "content-type=application/json");
                    av1.visitEnd();
                }
                av0.visitEnd();
            }
            {
                av0 = mv.visitParameterAnnotation(0, "Lorg/springframework/web/bind/annotation/PathVariable;", true);
                av0.visit("value", "beanName");
                av0.visitEnd();
            }
            {
                av0 = mv.visitParameterAnnotation(1, "Lorg/springframework/web/bind/annotation/PathVariable;", true);
                av0.visit("value", "method");
                av0.visitEnd();
            }
            {
                av0 = mv.visitParameterAnnotation(2, "Lorg/springframework/web/bind/annotation/RequestParam;", true);
                av0.visit("value", "ac");
                av0.visit("required", Boolean.FALSE);
                av0.visitEnd();
            }
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
            Label l3 = new Label();
            Label l4 = new Label();
            Label l5 = new Label();
            mv.visitTryCatchBlock(l3, l4, l5, "ctd/security/exception/SecurityException");
            Label l6 = new Label();
            Label l7 = new Label();
            mv.visitTryCatchBlock(l6, l7, l5, "ctd/security/exception/SecurityException");
            Label l8 = new Label();
            mv.visitTryCatchBlock(l3, l4, l8, "ctd/util/exception/CodedBaseException");
            mv.visitTryCatchBlock(l6, l7, l8, "ctd/util/exception/CodedBaseException");
            Label l9 = new Label();
            mv.visitTryCatchBlock(l3, l4, l9, "ctd/util/exception/CodedBaseRuntimeException");
            mv.visitTryCatchBlock(l6, l7, l9, "ctd/util/exception/CodedBaseRuntimeException");
            Label l10 = new Label();
            mv.visitTryCatchBlock(l3, l4, l10, "java/lang/Exception");
            mv.visitTryCatchBlock(l6, l7, l10, "java/lang/Exception");
            Label l11 = new Label();
            Label l12 = new Label();
            Label l13 = new Label();
            mv.visitTryCatchBlock(l11, l12, l13, "java/lang/Exception");
            Label l14 = new Label();
            mv.visitTryCatchBlock(l11, l12, l14, null);
            Label l15 = new Label();
            mv.visitTryCatchBlock(l13, l15, l14, null);
            Label l16 = new Label();
            mv.visitTryCatchBlock(l14, l16, l14, null);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(156, l17);
            mv.visitTypeInsn(NEW, "ctd/net/rpc/json/JSONResponseBean");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/net/rpc/json/JSONResponseBean", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 6);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(157, l18);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/ServletUtils", "isAcceptGzip", "(Ljavax/servlet/http/HttpServletRequest;)Z", false);
            mv.visitVarInsn(ISTORE, 7);
            mv.visitLabel(l3);
            mv.visitLineNumber(162, l3);
            mv.visitLdcInsn("$httpRequest");
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "put", "(Ljava/lang/String;Ljava/lang/Object;)V", false);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(164, l19);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "org/apache/commons/lang3/StringUtils", "isNotEmpty", "(Ljava/lang/CharSequence;)Z", false);
            Label l20 = new Label();
            mv.visitJumpInsn(IFEQ, l20);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitLineNumber(165, l21);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/mvc/controller/support/JSONRequester", "getRealBeanName", "(Ljava/lang/String;)Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 1);
            Label l22 = new Label();
            mv.visitLabel(l22);
            mv.visitLineNumber(166, l22);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/net/rpc/util/ServiceAdapter", "getServiceDescFixed", "(Ljava/lang/String;)Lctd/net/rpc/desc/support/ServiceDesc;", false);
            mv.visitVarInsn(ASTORE, 11);
            Label l23 = new Label();
            mv.visitLabel(l23);
            mv.visitLineNumber(167, l23);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/mvc/controller/support/JSONRequester", "isAccessible", "(Ljavax/servlet/http/HttpServletRequest;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lctd/net/rpc/desc/support/ServiceDesc;)Z", false);
            Label l24 = new Label();
            mv.visitJumpInsn(IFNE, l24);
            Label l25 = new Label();
            mv.visitLabel(l25);
            mv.visitLineNumber(168, l25);
            mv.visitTypeInsn(NEW, "ctd/security/exception/SecurityException");
            mv.visitInsn(DUP);
            mv.visitFieldInsn(GETSTATIC, "ctd/security/exception/SecurityException", "ACCESS_DENIED", "I");
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/security/exception/SecurityException", "<init>", "(I)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l24);
            mv.visitLineNumber(171, l24);
            mv.visitFrame(Opcodes.F_FULL, 12, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/lang/String", "java/lang/String", "java/lang/String", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "ctd/net/rpc/json/JSONResponseBean", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "ctd/net/rpc/desc/support/ServiceDesc"}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/net/rpc/util/ServiceAdapter", "findLocalServiceDesc", "(Ljava/lang/String;)Lctd/net/rpc/desc/support/ServiceDesc;", false);
            mv.visitVarInsn(ASTORE, 10);
            Label l26 = new Label();
            mv.visitLabel(l26);
            mv.visitLineNumber(172, l26);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitJumpInsn(IFNONNULL, l6);
            Label l27 = new Label();
            mv.visitLabel(l27);
            mv.visitLineNumber(173, l27);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEINTERFACE, "javax/servlet/http/HttpServletRequest", "getInputStream", "()Ljavax/servlet/ServletInputStream;", true);
            mv.visitMethodInsn(INVOKESTATIC, "org/apache/commons/io/IOUtils", "toByteArray", "(Ljava/io/InputStream;)[B", false);
            mv.visitVarInsn(ASTORE, 12);
            Label l28 = new Label();
            mv.visitLabel(l28);
            mv.visitLineNumber(174, l28);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/net/rpc/util/ServiceAdapter", "invokeWithJsonBytes", "(Ljava/lang/String;Ljava/lang/String;[B)[B", false);
            mv.visitVarInsn(ASTORE, 13);
            mv.visitLabel(l0);
            mv.visitLineNumber(177, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 13);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/mvc/controller/support/JSONRequester", "jsonBytesOutput", "(Ljavax/servlet/http/HttpServletResponse;[BZ)V", false);
            mv.visitLabel(l1);
            mv.visitLineNumber(181, l1);
            Label l29 = new Label();
            mv.visitJumpInsn(GOTO, l29);
            mv.visitLabel(l2);
            mv.visitLineNumber(178, l2);
            mv.visitFrame(Opcodes.F_FULL, 14, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/lang/String", "java/lang/String", "java/lang/String", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "ctd/net/rpc/json/JSONResponseBean", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, "ctd/net/rpc/desc/support/ServiceDesc", "ctd/net/rpc/desc/support/ServiceDesc", "[B", "[B"}, 1, new Object[]{"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 14);
            Label l30 = new Label();
            mv.visitLabel(l30);
            mv.visitLineNumber(179, l30);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitIntInsn(SIPUSH, 500);
            mv.visitMethodInsn(INVOKEINTERFACE, "javax/servlet/http/HttpServletResponse", "setStatus", "(I)V", true);
            Label l31 = new Label();
            mv.visitLabel(l31);
            mv.visitLineNumber(180, l31);
            mv.visitFieldInsn(GETSTATIC, "ctd/mvc/controller/support/JSONRequester", "logger", "Lorg/slf4j/Logger;");
            mv.visitVarInsn(ALOAD, 14);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "getMessage", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "error", "(Ljava/lang/String;)V", true);
            mv.visitLabel(l29);
            mv.visitLineNumber(183, l29);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "clear", "()V", false);
            mv.visitLabel(l4);
            mv.visitLineNumber(184, l4);
            mv.visitInsn(RETURN);
            mv.visitLabel(l6);
            mv.visitLineNumber(187, l6);
            mv.visitFrame(Opcodes.F_CHOP, 2, null, 0, null);
            mv.visitVarInsn(ALOAD, 11);
            Label l32 = new Label();
            mv.visitJumpInsn(IFNULL, l32);
            Label l33 = new Label();
            mv.visitLabel(l33);
            mv.visitLineNumber(188, l33);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/desc/support/ServiceDesc", "getProperties", "()Ljava/util/Map;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/desc/support/ServiceDesc", "setProperties", "(Ljava/util/Map;)V", false);
            mv.visitLabel(l32);
            mv.visitLineNumber(191, l32);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/desc/support/ServiceDesc", "getMethodByName", "(Ljava/lang/String;)Lctd/net/rpc/desc/support/MethodDesc;", false);
            mv.visitVarInsn(ASTORE, 12);
            Label l34 = new Label();
            mv.visitLabel(l34);
            mv.visitLineNumber(192, l34);
            mv.visitVarInsn(ALOAD, 12);
            Label l35 = new Label();
            mv.visitJumpInsn(IFNONNULL, l35);
            Label l36 = new Label();
            mv.visitLabel(l36);
            mv.visitLineNumber(193, l36);
            mv.visitTypeInsn(NEW, "ctd/util/json/support/exception/JSONParseException");
            mv.visitInsn(DUP);
            mv.visitIntInsn(SIPUSH, 405);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitLdcInsn("service[");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("] method[");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("] not found.");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/util/json/support/exception/JSONParseException", "<init>", "(ILjava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l35);
            mv.visitLineNumber(196, l35);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"ctd/net/rpc/desc/support/MethodDesc"}, 0, null);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEINTERFACE, "javax/servlet/http/HttpServletRequest", "getInputStream", "()Ljavax/servlet/ServletInputStream;", true);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/net/rpc/json/JSONRequestParser", "parseParameters", "(Lctd/net/rpc/desc/support/MethodDesc;Ljava/io/InputStream;)[Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 13);
            Label l37 = new Label();
            mv.visitLabel(l37);
            mv.visitLineNumber(197, l37);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitTypeInsn(CHECKCAST, "ctd/net/rpc/beans/ServiceBean");
            mv.visitVarInsn(ALOAD, 12);
            mv.visitVarInsn(ALOAD, 13);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/net/rpc/util/ServiceAdapter", "invokeLocalService", "(Lctd/net/rpc/beans/ServiceBean;Lctd/net/rpc/desc/support/MethodDesc;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 14);
            Label l38 = new Label();
            mv.visitLabel(l38);
            mv.visitLineNumber(198, l38);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 14);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setBody", "(Ljava/lang/Object;)V", false);
            Label l39 = new Label();
            mv.visitLabel(l39);
            mv.visitLineNumber(199, l39);
            mv.visitJumpInsn(GOTO, l7);
            mv.visitLabel(l20);
            mv.visitLineNumber(200, l20);
            mv.visitFrame(Opcodes.F_FULL, 8, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/lang/String", "java/lang/String", "java/lang/String", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "ctd/net/rpc/json/JSONResponseBean", Opcodes.INTEGER}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEINTERFACE, "javax/servlet/http/HttpServletRequest", "getInputStream", "()Ljavax/servlet/ServletInputStream;", true);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/net/rpc/json/JSONRequestParser", "parse", "(Ljava/io/InputStream;)Lctd/net/rpc/json/JSONRequestBean;", false);
            mv.visitVarInsn(ASTORE, 11);
            Label l40 = new Label();
            mv.visitLabel(l40);
            mv.visitLineNumber(201, l40);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitLdcInsn("actionId");
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONRequestBean", "getProperty", "(Ljava/lang/String;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/lang/String");
            mv.visitVarInsn(ASTORE, 3);
            Label l41 = new Label();
            mv.visitLabel(l41);
            mv.visitLineNumber(202, l41);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONRequestBean", "getServiceId", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 1);
            Label l42 = new Label();
            mv.visitLabel(l42);
            mv.visitLineNumber(203, l42);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/net/rpc/util/ServiceAdapter", "getServiceDescFixed", "(Ljava/lang/String;)Lctd/net/rpc/desc/support/ServiceDesc;", false);
            mv.visitVarInsn(ASTORE, 10);
            Label l43 = new Label();
            mv.visitLabel(l43);
            mv.visitLineNumber(204, l43);
            mv.visitVarInsn(ALOAD, 10);
            Label l44 = new Label();
            mv.visitJumpInsn(IFNULL, l44);
            Label l45 = new Label();
            mv.visitLabel(l45);
            mv.visitLineNumber(205, l45);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/desc/support/ServiceDesc", "getProperties", "()Ljava/util/Map;", false);
            mv.visitVarInsn(ASTORE, 12);
            Label l46 = new Label();
            mv.visitLabel(l46);
            mv.visitLineNumber(206, l46);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitJumpInsn(IFNULL, l44);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitLdcInsn("track_log_level");
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "containsKey", "(Ljava/lang/Object;)Z", true);
            mv.visitJumpInsn(IFEQ, l44);
            Label l47 = new Label();
            mv.visitLabel(l47);
            mv.visitLineNumber(207, l47);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitLdcInsn("track_log_level");
            mv.visitVarInsn(ALOAD, 12);
            mv.visitLdcInsn("track_log_level");
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONRequestBean", "setProperty", "(Ljava/lang/String;Ljava/lang/Object;)V", false);
            mv.visitLabel(l44);
            mv.visitLineNumber(211, l44);
            mv.visitFrame(Opcodes.F_FULL, 12, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/lang/String", "java/lang/String", "java/lang/String", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "ctd/net/rpc/json/JSONResponseBean", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, "ctd/net/rpc/desc/support/ServiceDesc", "ctd/net/rpc/json/JSONRequestBean"}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/mvc/controller/support/JSONRequester", "isAccessible", "(Ljavax/servlet/http/HttpServletRequest;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lctd/net/rpc/desc/support/ServiceDesc;)Z", false);
            Label l48 = new Label();
            mv.visitJumpInsn(IFNE, l48);
            Label l49 = new Label();
            mv.visitLabel(l49);
            mv.visitLineNumber(212, l49);
            mv.visitTypeInsn(NEW, "ctd/security/exception/SecurityException");
            mv.visitInsn(DUP);
            mv.visitFieldInsn(GETSTATIC, "ctd/security/exception/SecurityException", "ACCESS_DENIED", "I");
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/security/exception/SecurityException", "<init>", "(I)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l48);
            mv.visitLineNumber(215, l48);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/net/rpc/util/ServiceAdapter", "invokeWithJsonRequest", "(Lctd/net/rpc/json/JSONRequestBean;)Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 12);
            Label l50 = new Label();
            mv.visitLabel(l50);
            mv.visitLineNumber(216, l50);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setBody", "(Ljava/lang/Object;)V", false);
            mv.visitLabel(l7);
            mv.visitLineNumber(258, l7);
            mv.visitFrame(Opcodes.F_FULL, 8, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/lang/String", "java/lang/String", "java/lang/String", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "ctd/net/rpc/json/JSONResponseBean", Opcodes.INTEGER}, 0, new Object[]{});
            mv.visitJumpInsn(GOTO, l11);
            mv.visitLabel(l5);
            mv.visitLineNumber(218, l5);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"ctd/security/exception/SecurityException"});
            mv.visitVarInsn(ASTORE, 10);
            Label l51 = new Label();
            mv.visitLabel(l51);
            mv.visitLineNumber(219, l51);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/mvc/controller/support/JSONRequester", "outputAuthFailed", "(Ljavax/servlet/http/HttpServletResponse;Lctd/security/exception/SecurityException;)V", false);
            Label l52 = new Label();
            mv.visitLabel(l52);
            mv.visitLineNumber(220, l52);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "clear", "()V", false);
            Label l53 = new Label();
            mv.visitLabel(l53);
            mv.visitLineNumber(221, l53);
            mv.visitInsn(RETURN);
            mv.visitLabel(l8);
            mv.visitLineNumber(222, l8);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"ctd/util/exception/CodedBaseException"});
            mv.visitVarInsn(ASTORE, 10);
            Label l54 = new Label();
            mv.visitLabel(l54);
            mv.visitLineNumber(223, l54);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/util/exception/CodedBaseException", "getCause", "()Ljava/lang/Throwable;", false);
            mv.visitVarInsn(ASTORE, 8);
            Label l55 = new Label();
            mv.visitLabel(l55);
            mv.visitLineNumber(224, l55);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitTypeInsn(INSTANCEOF, "ctd/util/exception/CodedBase");
            Label l56 = new Label();
            mv.visitJumpInsn(IFEQ, l56);
            Label l57 = new Label();
            mv.visitLabel(l57);
            mv.visitLineNumber(225, l57);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitTypeInsn(CHECKCAST, "ctd/util/exception/CodedBase");
            mv.visitVarInsn(ASTORE, 9);
            Label l58 = new Label();
            mv.visitLabel(l58);
            mv.visitLineNumber(226, l58);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEINTERFACE, "ctd/util/exception/CodedBase", "getCode", "()I", true);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setCode", "(I)V", false);
            Label l59 = new Label();
            mv.visitLabel(l59);
            mv.visitLineNumber(227, l59);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEINTERFACE, "ctd/util/exception/CodedBase", "getMessage", "()Ljava/lang/String;", true);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setMsg", "(Ljava/lang/String;)V", false);
            Label l60 = new Label();
            mv.visitJumpInsn(GOTO, l60);
            mv.visitLabel(l56);
            mv.visitLineNumber(229, l56);
            mv.visitFrame(Opcodes.F_APPEND, 3, new Object[]{"java/lang/Throwable", Opcodes.TOP, "ctd/util/exception/CodedBaseException"}, 0, null);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/util/exception/CodedBaseException", "getCode", "()I", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setCode", "(I)V", false);
            Label l61 = new Label();
            mv.visitLabel(l61);
            mv.visitLineNumber(230, l61);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/util/exception/CodedBaseException", "getMessage", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setMsg", "(Ljava/lang/String;)V", false);
            mv.visitLabel(l60);
            mv.visitLineNumber(233, l60);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitFieldInsn(GETSTATIC, "ctd/mvc/controller/support/JSONRequester", "logger", "Lorg/slf4j/Logger;");
            mv.visitLdcInsn("jsonRequest[%s.%s(...)] failed.");
            mv.visitInsn(ICONST_2);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", false);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "error", "(Ljava/lang/String;Ljava/lang/Throwable;)V", true);
            Label l62 = new Label();
            mv.visitLabel(l62);
            mv.visitLineNumber(258, l62);
            mv.visitJumpInsn(GOTO, l11);
            mv.visitLabel(l9);
            mv.visitLineNumber(234, l9);
            mv.visitFrame(Opcodes.F_FULL, 8, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/lang/String", "java/lang/String", "java/lang/String", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "ctd/net/rpc/json/JSONResponseBean", Opcodes.INTEGER}, 1, new Object[]{"ctd/util/exception/CodedBaseRuntimeException"});
            mv.visitVarInsn(ASTORE, 10);
            Label l63 = new Label();
            mv.visitLabel(l63);
            mv.visitLineNumber(235, l63);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/util/exception/CodedBaseRuntimeException", "getCause", "()Ljava/lang/Throwable;", false);
            mv.visitVarInsn(ASTORE, 8);
            Label l64 = new Label();
            mv.visitLabel(l64);
            mv.visitLineNumber(236, l64);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitTypeInsn(INSTANCEOF, "ctd/util/exception/CodedBase");
            Label l65 = new Label();
            mv.visitJumpInsn(IFEQ, l65);
            Label l66 = new Label();
            mv.visitLabel(l66);
            mv.visitLineNumber(237, l66);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitTypeInsn(CHECKCAST, "ctd/util/exception/CodedBase");
            mv.visitVarInsn(ASTORE, 9);
            Label l67 = new Label();
            mv.visitLabel(l67);
            mv.visitLineNumber(238, l67);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEINTERFACE, "ctd/util/exception/CodedBase", "getCode", "()I", true);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setCode", "(I)V", false);
            Label l68 = new Label();
            mv.visitLabel(l68);
            mv.visitLineNumber(239, l68);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEINTERFACE, "ctd/util/exception/CodedBase", "getMessage", "()Ljava/lang/String;", true);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setMsg", "(Ljava/lang/String;)V", false);
            Label l69 = new Label();
            mv.visitJumpInsn(GOTO, l69);
            mv.visitLabel(l65);
            mv.visitLineNumber(241, l65);
            mv.visitFrame(Opcodes.F_APPEND, 3, new Object[]{"java/lang/Throwable", Opcodes.TOP, "ctd/util/exception/CodedBaseRuntimeException"}, 0, null);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/util/exception/CodedBaseRuntimeException", "getCode", "()I", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setCode", "(I)V", false);
            Label l70 = new Label();
            mv.visitLabel(l70);
            mv.visitLineNumber(242, l70);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/util/exception/CodedBaseRuntimeException", "getMessage", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setMsg", "(Ljava/lang/String;)V", false);
            mv.visitLabel(l69);
            mv.visitLineNumber(245, l69);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitFieldInsn(GETSTATIC, "ctd/mvc/controller/support/JSONRequester", "logger", "Lorg/slf4j/Logger;");
            mv.visitLdcInsn("jsonRequest[%s.%s(...)] failed.");
            mv.visitInsn(ICONST_2);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", false);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "error", "(Ljava/lang/String;Ljava/lang/Throwable;)V", true);
            Label l71 = new Label();
            mv.visitLabel(l71);
            mv.visitLineNumber(258, l71);
            mv.visitJumpInsn(GOTO, l11);
            mv.visitLabel(l10);
            mv.visitLineNumber(246, l10);
            mv.visitFrame(Opcodes.F_FULL, 8, new Object[]{"ctd/mvc/controller/support/JSONRequester", "java/lang/String", "java/lang/String", "java/lang/String", "javax/servlet/http/HttpServletRequest", "javax/servlet/http/HttpServletResponse", "ctd/net/rpc/json/JSONResponseBean", Opcodes.INTEGER}, 1, new Object[]{"java/lang/Exception"});
            mv.visitVarInsn(ASTORE, 10);
            Label l72 = new Label();
            mv.visitLabel(l72);
            mv.visitLineNumber(247, l72);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "getCause", "()Ljava/lang/Throwable;", false);
            mv.visitVarInsn(ASTORE, 8);
            Label l73 = new Label();
            mv.visitLabel(l73);
            mv.visitLineNumber(248, l73);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitTypeInsn(INSTANCEOF, "ctd/util/exception/CodedBase");
            Label l74 = new Label();
            mv.visitJumpInsn(IFNE, l74);
            Label l75 = new Label();
            mv.visitLabel(l75);
            mv.visitLineNumber(249, l75);
            mv.visitFieldInsn(GETSTATIC, "ctd/mvc/controller/support/JSONRequester", "logger", "Lorg/slf4j/Logger;");
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "getMessage", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "error", "(Ljava/lang/String;Ljava/lang/Throwable;)V", true);
            Label l76 = new Label();
            mv.visitLabel(l76);
            mv.visitLineNumber(250, l76);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitIntInsn(SIPUSH, 500);
            mv.visitMethodInsn(INVOKEINTERFACE, "javax/servlet/http/HttpServletResponse", "setStatus", "(I)V", true);
            Label l77 = new Label();
            mv.visitLabel(l77);
            mv.visitLineNumber(251, l77);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "clear", "()V", false);
            Label l78 = new Label();
            mv.visitLabel(l78);
            mv.visitLineNumber(252, l78);
            mv.visitInsn(RETURN);
            mv.visitLabel(l74);
            mv.visitLineNumber(255, l74);
            mv.visitFrame(Opcodes.F_APPEND, 3, new Object[]{"java/lang/Throwable", Opcodes.TOP, "java/lang/Exception"}, 0, null);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitTypeInsn(CHECKCAST, "ctd/util/exception/CodedBase");
            mv.visitVarInsn(ASTORE, 9);
            Label l79 = new Label();
            mv.visitLabel(l79);
            mv.visitLineNumber(256, l79);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEINTERFACE, "ctd/util/exception/CodedBase", "getCode", "()I", true);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setCode", "(I)V", false);
            Label l80 = new Label();
            mv.visitLabel(l80);
            mv.visitLineNumber(257, l80);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEINTERFACE, "ctd/util/exception/CodedBase", "getMessage", "()Ljava/lang/String;", true);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/json/JSONResponseBean", "setMsg", "(Ljava/lang/String;)V", false);
            mv.visitLabel(l11);
            mv.visitLineNumber(261, l11);
            mv.visitFrame(Opcodes.F_CHOP, 3, null, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/mvc/controller/support/JSONRequester", "jsonOutput", "(Ljavax/servlet/http/HttpServletResponse;Lctd/net/rpc/json/JSONResponseBean;Z)V", false);
            mv.visitLabel(l12);
            mv.visitLineNumber(267, l12);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "clear", "()V", false);
            Label l81 = new Label();
            mv.visitLabel(l81);
            mv.visitLineNumber(268, l81);
            Label l82 = new Label();
            mv.visitJumpInsn(GOTO, l82);
            mv.visitLabel(l13);
            mv.visitLineNumber(262, l13);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Exception"});
            mv.visitVarInsn(ASTORE, 10);
            Label l83 = new Label();
            mv.visitLabel(l83);
            mv.visitLineNumber(263, l83);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitIntInsn(SIPUSH, 500);
            mv.visitMethodInsn(INVOKEINTERFACE, "javax/servlet/http/HttpServletResponse", "setStatus", "(I)V", true);
            Label l84 = new Label();
            mv.visitLabel(l84);
            mv.visitLineNumber(264, l84);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
            Label l85 = new Label();
            mv.visitLabel(l85);
            mv.visitLineNumber(265, l85);
            mv.visitFieldInsn(GETSTATIC, "ctd/mvc/controller/support/JSONRequester", "logger", "Lorg/slf4j/Logger;");
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "getMessage", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "error", "(Ljava/lang/String;)V", true);
            mv.visitLabel(l15);
            mv.visitLineNumber(267, l15);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "clear", "()V", false);
            Label l86 = new Label();
            mv.visitLabel(l86);
            mv.visitLineNumber(268, l86);
            mv.visitJumpInsn(GOTO, l82);
            mv.visitLabel(l14);
            mv.visitLineNumber(267, l14);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 15);
            mv.visitLabel(l16);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "clear", "()V", false);
            Label l87 = new Label();
            mv.visitLabel(l87);
            mv.visitLineNumber(268, l87);
            mv.visitVarInsn(ALOAD, 15);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l82);
            mv.visitLineNumber(270, l82);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(RETURN);
            Label l88 = new Label();
            mv.visitLabel(l88);
            mv.visitLocalVariable("var23", "Ljava/io/IOException;", null, l30, l29, 14);
            mv.visitLocalVariable("bytes", "[B", null, l28, l6, 12);
            mv.visitLocalVariable("res", "[B", null, l0, l6, 13);
            mv.visitLocalVariable("remoteService", "Lctd/net/rpc/desc/support/ServiceDesc;", null, l23, l39, 11);
            mv.visitLocalVariable("method", "Lctd/net/rpc/desc/support/MethodDesc;", null, l34, l39, 12);
            mv.visitLocalVariable("parameters", "[Ljava/lang/Object;", null, l37, l39, 13);
            mv.visitLocalVariable("result", "Ljava/lang/Object;", null, l38, l39, 14);
            mv.visitLocalVariable("service", "Lctd/net/rpc/desc/support/ServiceDesc;", null, l26, l20, 10);
            mv.visitLocalVariable("confs", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", l46, l44, 12);
            mv.visitLocalVariable("requestBean", "Lctd/net/rpc/json/JSONRequestBean;", null, l40, l7, 11);
            mv.visitLocalVariable("result", "Ljava/lang/Object;", null, l50, l7, 12);
            mv.visitLocalVariable("service", "Lctd/net/rpc/desc/support/ServiceDesc;", null, l43, l7, 10);
            mv.visitLocalVariable("var24", "Lctd/security/exception/SecurityException;", null, l51, l8, 10);
            mv.visitLocalVariable("c", "Lctd/util/exception/CodedBase;", null, l58, l56, 9);
            mv.visitLocalVariable("var25", "Lctd/util/exception/CodedBaseException;", null, l54, l62, 10);
            mv.visitLocalVariable("t", "Ljava/lang/Throwable;", null, l55, l9, 8);
            mv.visitLocalVariable("c", "Lctd/util/exception/CodedBase;", null, l67, l65, 9);
            mv.visitLocalVariable("var26", "Lctd/util/exception/CodedBaseRuntimeException;", null, l63, l71, 10);
            mv.visitLocalVariable("t", "Ljava/lang/Throwable;", null, l64, l10, 8);
            mv.visitLocalVariable("var27", "Ljava/lang/Exception;", null, l72, l11, 10);
            mv.visitLocalVariable("t", "Ljava/lang/Throwable;", null, l73, l11, 8);
            mv.visitLocalVariable("c", "Lctd/util/exception/CodedBase;", null, l79, l11, 9);
            mv.visitLocalVariable("var21", "Ljava/lang/Exception;", null, l83, l15, 10);
            mv.visitLocalVariable("this", "Lctd/mvc/controller/support/JSONRequester;", null, l17, l88, 0);
            mv.visitLocalVariable("beanName", "Ljava/lang/String;", null, l17, l88, 1);
            mv.visitLocalVariable("methodName", "Ljava/lang/String;", null, l17, l88, 2);
            mv.visitLocalVariable("actionId", "Ljava/lang/String;", null, l17, l88, 3);
            mv.visitLocalVariable("request", "Ljavax/servlet/http/HttpServletRequest;", null, l17, l88, 4);
            mv.visitLocalVariable("response", "Ljavax/servlet/http/HttpServletResponse;", null, l17, l88, 5);
            mv.visitLocalVariable("responseBean", "Lctd/net/rpc/json/JSONResponseBean;", null, l18, l88, 6);
            mv.visitLocalVariable("gzip", "Z", null, l3, l88, 7);
            mv.visitMaxs(6, 16);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE, "getRealBeanName", "(Ljava/lang/String;)Ljava/lang/String;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(273, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn("$.");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z", false);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(274, l2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn("$");
            mv.visitMethodInsn(INVOKESTATIC, "ctd/spring/AppDomainContext", "getName", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESTATIC, "org/apache/commons/lang3/StringUtils", "replaceOnce", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 1);
            mv.visitLabel(l1);
            mv.visitLineNumber(277, l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARETURN);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLocalVariable("this", "Lctd/mvc/controller/support/JSONRequester;", null, l0, l3, 0);
            mv.visitLocalVariable("beanName", "Ljava/lang/String;", null, l0, l3, 1);
            mv.visitMaxs(3, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE, "isAccessible", "(Ljavax/servlet/http/HttpServletRequest;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lctd/net/rpc/desc/support/ServiceDesc;)Z", null, new String[]{"ctd/util/exception/CodedBaseException"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(281, l0);
            mv.visitVarInsn(ALOAD, 5);
            Label l1 = new Label();
            mv.visitJumpInsn(IFNONNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(282, l2);
            mv.visitTypeInsn(NEW, "ctd/util/exception/CodedBaseException");
            mv.visitInsn(DUP);
            mv.visitIntInsn(SIPUSH, 404);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitLdcInsn("service[");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("] not found.");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/util/exception/CodedBaseException", "<init>", "(ILjava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l1);
            mv.visitLineNumber(284, l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("mvc_authentication");
            mv.visitLdcInsn(Type.getType("Ljava/lang/Boolean;"));
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/desc/support/ServiceDesc", "getProperty", "(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/lang/Boolean");
            mv.visitVarInsn(ASTORE, 6);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(285, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/mvc/controller/support/JSONRequester", "isAccessibleAction", "(Ljava/lang/String;)Z", false);
            mv.visitVarInsn(ISTORE, 7);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(286, l4);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z", false);
            Label l5 = new Label();
            mv.visitJumpInsn(IFEQ, l5);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitJumpInsn(IFNE, l5);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(287, l6);
            mv.visitInsn(ICONST_0);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l5);
            mv.visitLineNumber(289, l5);
            mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/lang/Boolean", Opcodes.INTEGER}, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z", false);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/mvc/controller/support/JSONRequester", "methodNeedAuthorize", "(ZLctd/net/rpc/desc/support/ServiceDesc;Ljava/lang/String;)Z", false);
            mv.visitVarInsn(ISTORE, 8);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(290, l7);
            mv.visitVarInsn(ILOAD, 8);
            Label l8 = new Label();
            mv.visitJumpInsn(IFEQ, l8);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(291, l9);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/mvc/controller/util/UserRoleTokenUtils", "getUserRoleToken", "(Ljavax/servlet/http/HttpServletRequest;)Lctd/account/UserRoleToken;", false);
            mv.visitVarInsn(ASTORE, 9);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(292, l10);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/mvc/controller/util/UserRoleTokenUtils", "getCurrentDeptId", "(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 10);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(293, l11);
            mv.visitTypeInsn(NEW, "java/util/HashMap");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 11);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(294, l12);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitLdcInsn("$uid");
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/account/UserRoleToken", "getUserId", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitInsn(POP);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(295, l13);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitLdcInsn("$urt");
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/account/UserRoleToken", "getId", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitInsn(POP);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(296, l14);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitLdcInsn("$tenantId");
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/account/UserRoleToken", "getTenantId", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitInsn(POP);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(297, l15);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitLdcInsn("currentDeptId");
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitInsn(POP);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(298, l16);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitLdcInsn("$clientIpAddress");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/ServletUtils", "getIpAddress", "(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitInsn(POP);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(299, l17);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitLdcInsn("$fromDomain");
            mv.visitMethodInsn(INVOKESTATIC, "ctd/spring/AppDomainContext", "getName", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitInsn(POP);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(300, l18);
            mv.visitLdcInsn("$rpcInvokeHeaders");
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "put", "(Ljava/lang/String;Ljava/lang/Object;)V", false);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(301, l19);
            mv.visitLdcInsn("$ur");
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "put", "(Ljava/lang/String;Ljava/lang/Object;)V", false);
            Label l20 = new Label();
            mv.visitLabel(l20);
            mv.visitLineNumber(302, l20);
            mv.visitLdcInsn("currentDeptId");
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "put", "(Ljava/lang/String;Ljava/lang/Object;)V", false);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitLineNumber(303, l21);
            mv.visitLdcInsn("$clientIpAddress");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/ServletUtils", "getIpAddress", "(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "put", "(Ljava/lang/String;Ljava/lang/Object;)V", false);
            Label l22 = new Label();
            mv.visitLabel(l22);
            mv.visitLineNumber(304, l22);
            mv.visitLdcInsn("$fromDomain");
            mv.visitMethodInsn(INVOKESTATIC, "ctd/spring/AppDomainContext", "getName", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/util/context/ContextUtils", "put", "(Ljava/lang/String;Ljava/lang/Object;)V", false);
            mv.visitLabel(l8);
            mv.visitLineNumber(307, l8);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IRETURN);
            Label l23 = new Label();
            mv.visitLabel(l23);
            mv.visitLocalVariable("token", "Lctd/account/UserRoleToken;", null, l10, l8, 9);
            mv.visitLocalVariable("currentDeptId", "Ljava/lang/String;", null, l11, l8, 10);
            mv.visitLocalVariable("headers", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", l12, l8, 11);
            mv.visitLocalVariable("methodNeedAuthorize", "Z", null, l7, l23, 8);
            mv.visitLocalVariable("authentication", "Ljava/lang/Boolean;", null, l3, l23, 6);
            mv.visitLocalVariable("actionAccessible", "Z", null, l4, l23, 7);
            mv.visitLocalVariable("this", "Lctd/mvc/controller/support/JSONRequester;", null, l0, l23, 0);
            mv.visitLocalVariable("request", "Ljavax/servlet/http/HttpServletRequest;", null, l0, l23, 1);
            mv.visitLocalVariable("beanName", "Ljava/lang/String;", null, l0, l23, 2);
            mv.visitLocalVariable("method", "Ljava/lang/String;", null, l0, l23, 3);
            mv.visitLocalVariable("actionId", "Ljava/lang/String;", null, l0, l23, 4);
            mv.visitLocalVariable("service", "Lctd/net/rpc/desc/support/ServiceDesc;", null, l0, l23, 5);
            mv.visitMaxs(5, 12);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE, "isAccessibleAction", "(Ljava/lang/String;)Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(313, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "org/apache/commons/lang3/StringUtils", "isEmpty", "(Ljava/lang/CharSequence;)Z", false);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(314, l2);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l1);
            mv.visitLineNumber(316, l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;)[Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(317, l3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKESTATIC, "ctd/security/Repository", "getNode", "([Ljava/lang/String;)Lctd/security/ResourceNode;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(318, l4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/security/ResourceNode", "lookupPermissionMode", "()Lctd/security/Mode;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/security/Mode", "isAccessible", "()Z", false);
            mv.visitInsn(IRETURN);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLocalVariable("paths", "[Ljava/lang/String;", null, l3, l5, 2);
            mv.visitLocalVariable("node", "Lctd/security/ResourceNode;", null, l4, l5, 3);
            mv.visitLocalVariable("this", "Lctd/mvc/controller/support/JSONRequester;", null, l0, l5, 0);
            mv.visitLocalVariable("actionId", "Ljava/lang/String;", null, l0, l5, 1);
            mv.visitMaxs(2, 4);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE, "methodNeedAuthorize", "(ZLctd/net/rpc/desc/support/ServiceDesc;Ljava/lang/String;)Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(323, l0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitLdcInsn("mvc_auth_method_exclude");
            mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/desc/support/ServiceDesc", "getProperty", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/lang/String");
            mv.visitVarInsn(ASTORE, 4);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(324, l1);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKESTATIC, "org/apache/commons/lang3/StringUtils", "isEmpty", "(Ljava/lang/CharSequence;)Z", false);
            Label l2 = new Label();
            mv.visitJumpInsn(IFEQ, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(325, l3);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l2);
            mv.visitLineNumber(327, l2);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/String"}, 0, null);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitLdcInsn(",");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;)[Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(328, l4);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ASTORE, 6);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(329, l5);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ISTORE, 7);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(331, l6);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 8);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitFrame(Opcodes.F_FULL, 9, new Object[]{"ctd/mvc/controller/support/JSONRequester", Opcodes.INTEGER, "ctd/net/rpc/desc/support/ServiceDesc", "java/lang/String", "java/lang/String", "[Ljava/lang/String;", "[Ljava/lang/String;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[]{});
            mv.visitVarInsn(ILOAD, 8);
            mv.visitVarInsn(ILOAD, 7);
            Label l8 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l8);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(332, l9);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitInsn(AALOAD);
            mv.visitVarInsn(ASTORE, 9);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(333, l10);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "trim", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "matches", "(Ljava/lang/String;)Z", false);
            Label l11 = new Label();
            mv.visitJumpInsn(IFEQ, l11);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(334, l12);
            mv.visitVarInsn(ILOAD, 1);
            Label l13 = new Label();
            mv.visitJumpInsn(IFNE, l13);
            mv.visitInsn(ICONST_1);
            Label l14 = new Label();
            mv.visitJumpInsn(GOTO, l14);
            mv.visitLabel(l13);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/String"}, 0, null);
            mv.visitInsn(ICONST_0);
            mv.visitLabel(l14);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{Opcodes.INTEGER});
            mv.visitInsn(IRETURN);
            mv.visitLabel(l11);
            mv.visitLineNumber(331, l11);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            mv.visitIincInsn(8, 1);
            mv.visitJumpInsn(GOTO, l7);
            mv.visitLabel(l8);
            mv.visitLineNumber(338, l8);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitInsn(IRETURN);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLocalVariable("p", "Ljava/lang/String;", null, l10, l11, 9);
            mv.visitLocalVariable("var8", "I", null, l7, l8, 8);
            mv.visitLocalVariable("patterns", "[Ljava/lang/String;", null, l4, l15, 5);
            mv.visitLocalVariable("var6", "[Ljava/lang/String;", null, l5, l15, 6);
            mv.visitLocalVariable("var7", "I", null, l6, l15, 7);
            mv.visitLocalVariable("this", "Lctd/mvc/controller/support/JSONRequester;", null, l0, l15, 0);
            mv.visitLocalVariable("authentication", "Z", null, l0, l15, 1);
            mv.visitLocalVariable("service", "Lctd/net/rpc/desc/support/ServiceDesc;", null, l0, l15, 2);
            mv.visitLocalVariable("method", "Ljava/lang/String;", null, l0, l15, 3);
            mv.visitLocalVariable("authProp", "Ljava/lang/String;", null, l1, l15, 4);
            mv.visitMaxs(3, 10);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_SYNTHETIC, "lambda$doBalance$0", "(Lctd/net/rpc/chain/ChainContext;)V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(117, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitTypeInsn(CHECKCAST, "ctd/net/rpc/chain/support/RpcClientChainContext");
            mv.visitVarInsn(ASTORE, 2);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(118, l1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/chain/support/RpcClientChainContext", "getServiceDesc", "()Lctd/net/rpc/desc/support/ServiceDesc;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/desc/support/ServiceDesc", "getId", "()Ljava/lang/String;", false);
            mv.visitLdcInsn(".");
            mv.visitMethodInsn(INVOKESTATIC, "org/apache/commons/lang3/StringUtils", "substringBefore", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(119, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "ctd/mvc/controller/support/JSONRequester", "domainMapping", "Ljava/util/Map;");
            mv.visitMethodInsn(INVOKESTATIC, "org/springframework/util/ObjectUtils", "isEmpty", "(Ljava/lang/Object;)Z", false);
            Label l3 = new Label();
            mv.visitJumpInsn(IFNE, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "ctd/mvc/controller/support/JSONRequester", "domainMapping", "Ljava/util/Map;");
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "containsKey", "(Ljava/lang/Object;)Z", true);
            mv.visitJumpInsn(IFEQ, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "ctd/mvc/controller/support/JSONRequester", "domainMapping", "Ljava/util/Map;");
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitMethodInsn(INVOKESTATIC, "org/springframework/util/ObjectUtils", "isEmpty", "(Ljava/lang/Object;)Z", false);
            mv.visitJumpInsn(IFNE, l3);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(120, l4);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitTypeInsn(NEW, "ctd/net/rpc/balance/HostBalance");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "ctd/mvc/controller/support/JSONRequester", "domainMapping", "Ljava/util/Map;");
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
            mv.visitTypeInsn(CHECKCAST, "java/lang/String");
            mv.visitMethodInsn(INVOKESPECIAL, "ctd/net/rpc/balance/HostBalance", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/chain/support/RpcClientChainContext", "setBalance", "(Lctd/net/rpc/balance/Balance;)V", false);
            mv.visitLabel(l3);
            mv.visitLineNumber(122, l3);
            mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"ctd/net/rpc/chain/support/RpcClientChainContext", "java/lang/String"}, 0, null);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "ctd/net/rpc/chain/support/RpcClientChainContext", "doNext", "()V", false);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(123, l5);
            mv.visitInsn(RETURN);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLocalVariable("this", "Lctd/mvc/controller/support/JSONRequester;", null, l0, l6, 0);
            mv.visitLocalVariable("context", "Lctd/net/rpc/chain/ChainContext;", null, l0, l6, 1);
            mv.visitLocalVariable("c", "Lctd/net/rpc/chain/support/RpcClientChainContext;", null, l1, l6, 2);
            mv.visitLocalVariable("domains", "Ljava/lang/String;", null, l2, l6, 3);
            mv.visitMaxs(5, 4);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(55, l0);
            mv.visitLdcInsn(Type.getType("Lctd/mvc/controller/support/JSONRequester;"));
            mv.visitMethodInsn(INVOKESTATIC, "org/slf4j/LoggerFactory", "getLogger", "(Ljava/lang/Class;)Lorg/slf4j/Logger;", false);
            mv.visitFieldInsn(PUTSTATIC, "ctd/mvc/controller/support/JSONRequester", "logger", "Lorg/slf4j/Logger;");
            mv.visitInsn(RETURN);
            mv.visitMaxs(1, 0);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }
}
